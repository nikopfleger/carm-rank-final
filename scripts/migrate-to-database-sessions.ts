#!/usr/bin/env node

/**
 * üîÑ Script de migraci√≥n de JWT a Database Sessions
 * 
 * Este script migra usuarios existentes que fueron creados con JWT sessions
 * para que funcionen con database sessions, creando los registros Account necesarios.
 */

import { PrismaClient } from '@prisma/client';
import { getPrismaDatabaseUrl } from '../lib/database/config';

// Cargar variables de entorno
require('dotenv').config({ path: '.env' });

const prisma = new PrismaClient({
    datasources: {
        db: {
            url: getPrismaDatabaseUrl()
        }
    }
});

async function migrateToDatabaseSessions() {
    console.log('üîÑ Iniciando migraci√≥n a Database Sessions...\n');

    try {
        // 1. Obtener usuarios que no tienen cuentas vinculadas
        const usersWithoutAccounts = await prisma.user.findMany({
            where: {
                accounts: {
                    none: {}
                }
            },
            select: {
                id: true,
                email: true,
                name: true,
                image: true,
                createdAt: true
            }
        });

        console.log(`üìä Encontrados ${usersWithoutAccounts.length} usuarios sin cuentas vinculadas\n`);

        if (usersWithoutAccounts.length === 0) {
            console.log('‚úÖ No hay usuarios que migrar. Todos ya tienen accounts vinculadas.');
            return;
        }

        // 2. Para cada usuario, crear un Account de Google
        for (const user of usersWithoutAccounts) {
            console.log(`üë§ Migrando usuario: ${user.email}`);

            // Crear Account vinculada a Google para este usuario
            await prisma.account.create({
                data: {
                    userId: user.id,
                    type: "oauth",
                    provider: "google",
                    providerAccountId: `migrated_${user.id}`, // ID √∫nico para migraci√≥n
                    // No incluimos tokens reales ya que el usuario tendr√° que re-loguearse
                }
            });

            console.log(`   ‚úÖ Account creada para ${user.email}`);
        }

        console.log(`\nüéâ Migraci√≥n completada exitosamente!`);
        console.log(`üìà ${usersWithoutAccounts.length} usuarios migrados`);
        console.log(`\nüí° Los usuarios existentes deber√°n iniciar sesi√≥n nuevamente`);
        console.log(`   pero mantendr√°n sus roles y authorities.`);

    } catch (error) {
        console.error('‚ùå Error durante la migraci√≥n:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar la migraci√≥n
migrateToDatabaseSessions()
    .then(() => {
        console.log('\n‚úÖ Script completado exitosamente');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå Script fall√≥:', error);
        process.exit(1);
    });
