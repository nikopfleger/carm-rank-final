#!/usr/bin/env tsx

/**
 * Script para verificar la configuraci√≥n de conexi√≥n din√°mica
 * Basado en la soluci√≥n de Digital Ocean para prepared statements
 */

import { getDatabaseUrl, getDirectUrl, getPrismaConfig, logConnectionInfo } from '../lib/database/connection-config';

function testConnectionConfig() {
    console.log('üîç Verificando configuraci√≥n de conexi√≥n din√°mica...\n');

    // Mostrar informaci√≥n del stage actual
    const stage = process.env.STAGE || 'development';
    console.log(`üìã Stage actual: ${stage}`);

    // Mostrar URLs configuradas
    console.log('\nüîó URLs de conexi√≥n:');
    console.log(`DATABASE_URL: ${process.env.DATABASE_URL ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
    console.log(`DATABASE_URL_MIGRATE: ${process.env.DATABASE_URL_MIGRATE ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
    console.log(`DATABASE_URL_POOL: ${process.env.DATABASE_URL_POOL ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
    console.log(`POSTGRES_URL_NON_POOLING: ${process.env.POSTGRES_URL_NON_POOLING ? '‚úÖ Configurada' : '‚ùå No configurada'}`);

    // Mostrar URL seleccionada
    const selectedUrl = getDatabaseUrl();
    const directUrl = getDirectUrl();

    console.log('\nüéØ URL seleccionada:');
    console.log(`URL: ${selectedUrl.replace(/:[^:]*@/, ':***@')}`);
    if (directUrl && directUrl !== selectedUrl) {
        console.log(`Direct URL: ${directUrl.replace(/:[^:]*@/, ':***@')}`);
    }

    // Verificar configuraci√≥n de Prisma
    console.log('\n‚öôÔ∏è  Configuraci√≥n de Prisma:');
    const prismaConfig = getPrismaConfig();
    console.log(`URL: ${prismaConfig.url.replace(/:[^:]*@/, ':***@')}`);
    if (prismaConfig.directUrl) {
        console.log(`Direct URL: ${prismaConfig.directUrl.replace(/:[^:]*@/, ':***@')}`);
    }

    // Verificar flags importantes
    console.log('\nüö© Flags de conexi√≥n:');
    if (selectedUrl.includes('pgbouncer=true')) {
        console.log('‚úÖ Connection pooling habilitado (pgbouncer=true)');
    } else {
        console.log('‚ö†Ô∏è  Connection pooling NO habilitado');
    }

    if (selectedUrl.includes('prepareThreshold=0')) {
        console.log('‚úÖ Prepared statements deshabilitados (prepareThreshold=0)');
    } else {
        console.log('‚ö†Ô∏è  Prepared statements habilitados (puede causar errores)');
    }

    if (selectedUrl.includes('connection_limit=')) {
        const match = selectedUrl.match(/connection_limit=(\d+)/);
        if (match) {
            console.log(`‚úÖ Connection limit configurado: ${match[1]}`);
        }
    }

    if (selectedUrl.includes('connection_timeout=')) {
        const match = selectedUrl.match(/connection_timeout=(\d+)/);
        if (match) {
            console.log(`‚úÖ Connection timeout configurado: ${match[1]}s`);
        }
    }

    // Mostrar informaci√≥n de logging
    console.log('\nüìä Informaci√≥n de logging:');
    logConnectionInfo();

    console.log('\n‚úÖ Verificaci√≥n completada');
}

// Ejecutar si es llamado directamente
if (require.main === module) {
    testConnectionConfig();
}

export { testConnectionConfig };

